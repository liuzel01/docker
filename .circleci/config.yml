version: 2.1

parameters:
  imageName:
    type: string
    default: ""
  imageTag:
    type: string
    default: ""
  shopwareVersion:
    description: make sure a push does not trigger any workflow
    type: string
    default: ""
  setLatest:
    description: defines if the latest tag should be set to this version
    type: boolean
    default: false

# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------

workflows:

  release-image:
    when:
      and:
        - not:
            equal: [ "", << pipeline.parameters.imageName >> ]
    jobs:
      - job-build-arm64:
          name: build-arm
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - job-build-amd64:
          name: build-ard
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - job-update-manifest:
          name: update-manifest
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
          setLatest: << pipeline.parameters.setLatest >>
          requires:
            - build-arm
            - build-ard

  release-shuwei:
    when:
      and:
        - not:
            equal: [ "", << pipeline.parameters.shopwareVersion >> ]
    jobs:
      # ------------------------------------------------------------------------------------
      - job-build-arm64:
          name: sw-<< pipeline.parameters.shopwareVersion >>-dev-arm64
          imageName: "dev"
          imageTag: << pipeline.parameters.shopwareVersion >>
      # ------------------------------------------------------------------------------------
      - job-build-arm64:
          name: sw-<< pipeline.parameters.shopwareVersion >>-play-arm64
          imageName: "play"
          imageTag: << pipeline.parameters.shopwareVersion >>
      # ------------------------------------------------------------------------------------
      - job-build-amd64:
          name: sw-<< pipeline.parameters.shopwareVersion >>-dev-amd64
          imageName: "dev"
          imageTag: << pipeline.parameters.shopwareVersion >>
      # ------------------------------------------------------------------------------------
      - job-build-amd64:
          name: sw-<< pipeline.parameters.shopwareVersion >>-play-amd64
          imageName: "play"
          imageTag: << pipeline.parameters.shopwareVersion >>
      # ------------------------------------------------------------------------------------
      - job-update-manifest:
          name: update-manifest-dev
          imageName: "dev"
          imageTag: << pipeline.parameters.shopwareVersion >>
          setLatest: << pipeline.parameters.setLatest >>
          requires:
            - sw-<< pipeline.parameters.shopwareVersion >>-dev-amd64
            - sw-<< pipeline.parameters.shopwareVersion >>-dev-arm64
      # ------------------------------------------------------------------------------------
      - job-update-manifest:
          name: update-manifest-play
          imageName: "play"
          imageTag: << pipeline.parameters.shopwareVersion >>
          setLatest: << pipeline.parameters.setLatest >>
          requires:
            - sw-<< pipeline.parameters.shopwareVersion >>-play-amd64
            - sw-<< pipeline.parameters.shopwareVersion >>-play-arm64


# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  job-build-arm64:
    parameters:
      imageName:
        type: string
      imageTag:
        type: string
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: arm.medium
    steps:
      - checkout
      - cmd_install
      - cmd_image_build_push:
          imageName: <<parameters.imageName>>
          imageTag: <<parameters.imageTag>>
          imageArch: "arm64"

  job-build-amd64:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: medium
    parameters:
      imageName:
        type: string
      imageTag:
        type: string
    steps:
      - checkout
      - cmd_install
      - cmd_image_build_push:
          imageName: << parameters.imageName >>
          imageTag: << parameters.imageTag >>
          imageArch: "amd64"

  job-update-manifest:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: medium
    parameters:
      imageName:
        type: string
      imageTag:
        type: string
      setLatest:
        type: boolean
    steps:
      # ------------------------------------------------------------------------------------
      - run:
          name: Docker Hub Login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      # ------------------------------------------------------------------------------------
      - run:
          name: Create and push manifest (<< parameters.imageTag >>)
          command: |
            docker manifest create dockware/<< parameters.imageName >>:<< parameters.imageTag >> --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-amd64 --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-arm64
            docker manifest push dockware/<< parameters.imageName >>:<< parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - run:
          name: Create and push manifest (latest)
          command: |
            if [ << parameters.setLatest >> = true ]; then
              docker manifest create dockware/<< parameters.imageName >>:latest --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-amd64 --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-arm64
              docker manifest push dockware/<< parameters.imageName >>:latest
            fi

# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------

commands:

  cmd_install:
    steps:
      - restore_cache:
          key: vendor-cache
          paths:
            - vendor
      - run: sudo apt-get update
      - run: sudo apt-get install -y php-cli php-xml unzip
      - run: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - run: php composer-setup.php
      - run: sudo mv composer.phar /usr/local/bin/composer
      # ------------------------------------------------------------------------------------
      - run: make install
      - save_cache:
          key: vendor-cache
          paths:
           - vendor
      # ------------------------------------------------------------------------------------
      # ORCA generate command
      - run: make generate phar=1 -B

  cmd_image_build_push:
    parameters:
      imageName:
        type: string
      imageTag:
        type: string
      imageArch:
        type: string
    steps:
      # ------------------------------------------------------------------------------------
      - run:
          name: Verify Configuration
          command: |
            make verify image=<< parameters.imageName >> tag=<< parameters.imageTag >> -B
      # ------------------------------------------------------------------------------------
      - run:
          name: Build Image << parameters.imageName >>:<< parameters.imageTag >>
          command: |
            make build image=<< parameters.imageName >> tag=<< parameters.imageTag >> -B
      # ------------------------------------------------------------------------------------
      - run:
          name: Run SVRUnit Tests
          command: |
            make test image=<< parameters.imageName >> tag=<< parameters.imageTag >> -B
      - store_test_results:
          path: .reports
      - store_artifacts:
          path: .reports/report.xml
          destination: svrunit.xml
        # ------------------------------------------------------------------------------------
      - run:
          name: Install Cypress
          command: |
            cd tests/cypress && make install -B
      - run:
          name: Run Cypress Tests
          environment:
            IMG: << parameters.imageName >>
            TAG: << parameters.imageTag >>
          command: |
            echo 127.0.0.1 cypress.58shuwei.com | sudo tee -a /etc/hosts
            docker run --rm -p 80:80 --name shop -e SHOP_DOMAIN=cypress.58shuwei.com -d dockware/$IMG:$TAG
            while ! curl -k -s -o /dev/null http://cypress.58shuwei.com; do echo Waiting for dockware; sleep 1; done
            sleep 5
            docker logs shop
            cd tests/cypress && IMG=$IMG TAG=$TAG URL=http://cypress.58shuwei.com bash run.sh
      # ------------------------------------------------------------------------------------
      - run:
          name: Docker Hub Login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Tag Image for ARCH
          command: |
            docker tag dockware/<< parameters.imageName >>:<< parameters.imageTag >> dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>
      - run:
          name: Push Image
          command: |
            docker push dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>