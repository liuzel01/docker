#!/bin/bash

echo ""
echo "*******************************************************"
echo "** SHUWEI DOCKER IMAGE: {{ orca.image }}"
echo "** Tag: {{ orca.tag }}"
echo "** Version: {{ version }}"
echo "** Built: $(cat /build-date.txt)"
echo "** Copyright 2022 dasistweb GmbH"
echo "*******************************************************"
echo ""
echo "launching dockware...please wait..."
echo ""

{% block entrypoint %}
set -e

source /etc/apache2/envvars
source /var/www/.bashrc

# this is important to automatically use the bashrc file
# in the "exec" command below when using a simple docker runner command
export BASH_ENV=/var/www/.bashrc


CONTAINER_STARTUP_DIR=$(pwd)



# it's possible to add a custom boot script on startup.
# so we test if it exists and just execute it
file="/var/www/boot_start.sh"
if [ -f "$file" ] ; then
    sh $file
fi



{% block tz %}
echo "SHUWEI DOCKER: setting timezone to ${TZ}..."
sudo ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime
sudo dpkg-reconfigure -f noninteractive tzdata
echo "-----------------------------------------------------------"
{% endblock %}



{% block components %}


{% block components_filebeat %}
if [ $FILEBEAT_ENABLED = 1 ]; then
   echo "SHUWEI DOCKER: activating Filebeat..."
   sudo service filebeat start --strict.perms=false
   echo "-----------------------------------------------------------"
fi
{% endblock %}



{% block components_ssh %}
# checks if a different username is set in ENV and create if its not existing yet
if [ $SSH_USER != "not-set" ] && (! id -u "${SSH_USER}" >/dev/null 2>&1 ); then
    echo "SHUWEI DOCKER: creating additional SSH user...."
    # create a custom ssh user for our provided settings
    sudo adduser --disabled-password --uid 8888 --gecos "" --ingroup www-data $SSH_USER
    sudo usermod -a -G sudo $SSH_USER
    sudo usermod -m -d /var/www $SSH_USER | true
    sudo echo "${SSH_USER}:${SSH_PWD}" | sudo chpasswd
    sudo sed -i "s/${SSH_USER}:x:8888:33:/${SSH_USER}:x:33:33:/g" /etc/passwd
    # add sudo without password
    # write user to file cause we loos the var as we executing as root and get a new shell
    sudo echo "${SSH_USER}" >> /tmp/user.name
    sudo -u root sh -c 'echo "Defaults:$(cat /tmp/user.name) !requiretty" >> /etc/sudoers'
    sudo rm -rf /tmp/user.name
    # disable original ssh access
    sudo usermod -s /bin/false {{ ssh.user.name }}
    # allow ssh in sshd_config
    sudo sed -i "s/AllowUsers {{ ssh.user.name }}/AllowUsers ${SSH_USER}/g" /etc/ssh/sshd_config
    echo "-----------------------------------------------------------"
fi

# start the SSH service with the latest setup
echo "SHUWEI DOCKER: restarting SSH service...."
sudo service ssh restart
echo "-----------------------------------------------------------"
{% endblock %}



{% block components_mysql %}
echo "SHUWEI DOCKER: starting MySQL...."
# somehow its necessary to set permissions, because
# sometimes they get lost :)
# make sure that it is no longer present from the last run
file="/var/run/mysqld/mysqld.sock.lock"
if [ -f "$file" ] ; then
    sudo rm -f "$file"
fi

sudo chmod -R 777 /var/lib/mysql /var/run/mysqld
sudo service mysql start;

{% block components_mysql_credentials %}
if [ $MYSQL_USER != "not-set" ] && [ $MYSQL_PWD != "not-set" ]; then
    echo "SHUWEI DOCKER: creating new MySQL user...."
    # -----------------------------------
    # Shuwei users triggers. the DEFINER does also need to be changed to our new user
    # otherwise problems like "product cant be created in admin" will occur.
    # the only solution is to export the triggers, replace the DEFINER and import it again.
    sudo mysqldump -P 3306 -h localhost -u {{ db.user }} -p"{{ db.pwd }}" --triggers --add-drop-trigger --no-create-info --no-data --no-create-db --skip-opt {{ db.database }} > /tmp/triggers.sql
    sudo sed -i 's/DEFINER=`{{ db.user }}`@`%`/DEFINER=`'$MYSQL_USER'`@`%`/g' /tmp/triggers.sql
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} {{ db.database }} < /tmp/triggers.sql
    sudo rm -rf /tmp/triggers.sql
    # -----------------------------------
    # block remote access for {{ db.user }} user
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} -e "UPDATE mysql.user SET Host='localhost' WHERE User='{{ db.user }}' AND Host='%';";
    # -----------------------------------
    # add new user and grant privileges
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} -e "CREATE USER IF NOT EXISTS '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PWD"';";
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} -e "use mysql; update user set host='%' where user='$MYSQL_USER';";
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} -e "GRANT ALL PRIVILEGES ON *.* TO '"$MYSQL_USER"'@'%' IDENTIFIED BY '$MYSQL_PWD';";
    # -----------------------------------
    # apply and flush privileges
    sudo mysql --user={{ db.user }} --password={{ db.pwd }} -e "FLUSH PRIVILEGES;";
    echo "-----------------------------------------------------------"
fi
{% endblock %}
echo "-----------------------------------------------------------"
{% endblock %}

{% block components_mailcatcher %}
echo "SHUWEI DOCKER: starting mailcatcher...."
sudo /usr/bin/env $(which mailcatcher) --ip=0.0.0.0
echo "-----------------------------------------------------------"
{% endblock %}

{% block components_cron %}
echo "SHUWEI DOCKER: starting cron service...."
sudo service cron start
echo "-----------------------------------------------------------"
{% endblock %}

{% endblock %}


# --------------------------------------------------
# APACHE
# first set the correct doc root, because we need it for the php switch below
sudo sed -i 's#__dockware_apache_docroot__#'${APACHE_DOCROOT}'#g' /etc/apache2/sites-enabled/000-default.conf
# --------------------------------------------------



{% block php_version %}
echo "SHUWEI DOCKER: switching to PHP ${PHP_VERSION}..."
cd /var/www && make switch-php version=${PHP_VERSION}
sudo service apache2 stop
echo "-----------------------------------------------------------"
{% endblock %}


{% block components_composer %}
if [ $COMPOSER_VERSION = 1 ]; then
   echo "SHUWEI DOCKER: switching to composer 1..."
   sudo composer self-update --1
   echo "-----------------------------------------------------------"
fi
if [ $COMPOSER_VERSION = 2 ]; then
   echo "SHUWEI DOCKER: switching to composer 2..."
   sudo composer self-update --stable
   echo "-----------------------------------------------------------"
fi

# somehow we (once) had the problem that composer does not find a HOME directory
# this was the solution
export COMPOSER_HOME=/var/www
{% endblock %}


{% block components_xdebug %}
{# this block needs to be after php version change that we en/disable the correct xdebug for the correct php version #}
if [ $XDEBUG_ENABLED = 1 ]; then
   sh /var/www/scripts/bin/xdebug_enable.sh
 else
   sh /var/www/scripts/bin/xdebug_disable.sh
fi
{% endblock %}


{% block components_tideways %}
if [ $TIDEWAYS_KEY != "not-set" ]; then
    echo "SHUWEI DOCKER: activating Tideways...."
    sudo sed -i 's/__SWDOCKER_VAR_TIDEWAYS_ENV__/'${TIDEWAYS_ENV}'/g' /etc/default/tideways-daemon
    sudo sed -i 's/__SWDOCKER_VAR_TIDEWAYS_API_KEY__/'${TIDEWAYS_KEY}'/g' /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    sudo sed -i 's/__SWDOCKER_VAR_TIDEWAYS_SERVICE__/'${TIDEWAYS_SERVICE}'/g' /etc/php/$PHP_VERSION/fpm/conf.d/20-tideways.ini
    sudo sed -i 's/__SWDOCKER_VAR_TIDEWAYS_API_KEY__/'${TIDEWAYS_KEY}'/g' /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    sudo sed -i 's/__SWDOCKER_VAR_TIDEWAYS_SERVICE__/'${TIDEWAYS_SERVICE}'/g' /etc/php/$PHP_VERSION/cli/conf.d/20-tideways.ini
    sudo service tideways-daemon start
    echo "-----------------------------------------------------------"
fi
{% endblock %}



{% block node_version %}
if [[ ! -z "$NODE_VERSION" ]]; then
   echo "SHUWEI DOCKER: switching to Node ${NODE_VERSION}..."
   nvm alias default ${NODE_VERSION}
   # now make sure to at least have node and npm as sudo
   # nvm itself is not possible by design
   sudo rm -f /usr/local/bin/node
   sudo rm -f /usr/local/bin/npm
   sudo ln -s "$(which node)" "/usr/local/bin/node"
   sudo ln -s "$(which npm)" "/usr/local/bin/npm"
   echo "-----------------------------------------------------------"
fi
{% endblock %}



{% block setup_shuwei %}


{% endblock %}



# --------------------------------------------------
# APACHE
# sometimes the internal docker structure leaves
# some pid files existing. the container will be recreated....but
# in reality it's not! thus there might be the problem
# that an older pid file exists, which leads to the following error:
#   - "httpd (pid 13) already running"
# to avoid this, we simple remove an existing file
sudo rm -f /var/run/apache2/apache2.pid
# also, sometimes port 80 is used? happens if you have lots of local containers i think
# so let's just kill that, otherwise the container won't start
sudo lsof -t -i tcp:80 | sudo xargs kill >/dev/null 2>&1 || true;

# start test and start apache
echo "SHUWEI DOCKER: testing and starting Apache..."
sudo apache2ctl configtest
sudo service apache2 restart
echo "-----------------------------------------------------------"
# --------------------------------------------------


# before starting any commands
# we always need to ensure we are back in our
# configured WORKDIR of the container
echo "-----------------------------------------------------"
cd $CONTAINER_STARTUP_DIR


# now let's check if we have a custom boot script that
# should run after our other startup scripts.
file="/var/www/boot_end.sh"
if [ -f "$file" ] ; then
    sh $file
fi


# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------


# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------


{% block sw_build %}
# used to inject the custom build script of
# plugins in dockware/dev
{% endblock %}


# always execute custom commands in here.
# if a custom command is provided, then the container
# will automatically exit after it.
# that's somehow just how it works.
# otherwise it will continue with the code below
exec "$@"


# we still need this to allow custom events
# such as our BUILD_PLUGIN feature to exit the container
if [[ ! -z "$SWDOCKER_CI" ]]; then
    # CONTAINER WAS STARTED IN NON-BLOCKING CI MODE...."
    # SHUWEI DOCKER WILL NOW EXIT THE CONTAINER"
    echo ""
else
    tail -f /dev/null
fi
{% endblock%}

